{"version":3,"file":"edit_question.min.js","sources":["../src/edit_question.js"],"sourcesContent":["/*\n * This file is part of the QuestionPy Moodle plugin - https://questionpy.org\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {resetFormDirtyState} from 'core_form/changechecker';\nimport Notification from 'core/notification';\nimport {favouritePackage} from 'qtype_questionpy/utils';\n\n/**\n * This function is called by the <code>package_selection</code>-template and initializes the action button.\n *\n * When the package is changed, this function enables the hidden form element <code>qpy_package_changed</code> and\n * submits the form. Since <code>qpy_package_changed</code> is registered as a no-submit button, it prevents the form\n * data from being saved to the question, while still re-rendering the form with access to the new selected package\n * hash.\n *\n * @param {HTMLDivElement} card\n * @param {boolean} selected\n */\nexport function initActionButton(card, selected) {\n    const packageSelected = document.querySelector('input[name=\"qpy_package_selected\"]');\n    const packageFile = document.querySelector('input[name=\"qpy_package_file\"]');\n\n    if (selected) {\n        // Initialize the button to change the package.\n        const changeButton = card.getElementsByClassName(\"qpy-version-selection-button\")[0];\n        changeButton.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n\n            packageSelected.value = false;\n            packageSelected.removeAttribute(\"disabled\");\n            if (packageFile) {\n                packageFile.disabled = true;\n            }\n\n            // We do not want any form checking when changing a package.\n            resetFormDirtyState(changeButton);\n\n            e.target.form.submit();\n        });\n    } else {\n        const packageHash = document.querySelector('input[name=\"qpy_package_hash\"]');\n        const selectedHash = card.getElementsByClassName(\"qpy-version-selection\")[0];\n        const selectButton = card.getElementsByClassName(\"qpy-version-selection-button\")[0];\n\n        selectButton.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n\n            packageSelected.value = true;\n            packageSelected.removeAttribute(\"disabled\");\n            packageHash.value = selectedHash.value;\n\n            // We do not want any form checking when selecting a package.\n            resetFormDirtyState(selectButton);\n\n            e.target.form.submit();\n        });\n    }\n}\n\n/**\n * This function enables an auto-submit of the form if a package gets uploaded.\n */\nexport function initUploadForm() {\n    const packageFile = document.querySelector('input[name=\"qpy_package_file\"]');\n    const packageSelected = document.querySelector('input[name=\"qpy_package_selected\"]');\n    packageFile.addEventListener(\"change\", (e) => {\n        packageSelected.value = true;\n        packageSelected.removeAttribute(\"disabled\");\n        // We do not want any form checking when uploading a package.\n        resetFormDirtyState(packageFile);\n        e.target.form.submit();\n    });\n}\n\n/**\n * This function is called by the <code>package_selection</code>-template and initializes the favourite button, when\n * a package is already selected.\n *\n * @param {HTMLDivElement} card\n * @param {number} packageId\n */\nexport function initFavouriteButton(card, packageId) {\n    const button = card.querySelector('[data-for=\"favourite-button\"]');\n    if (!button) {\n        return;\n    }\n    const isFavouriteAttributeName = \"data-is-favourite\";\n    button.addEventListener(\"click\", async() => {\n        try {\n            const isFavourite = button.hasAttribute(isFavouriteAttributeName);\n            const successful = await favouritePackage(packageId, !isFavourite);\n            if (successful) {\n                button.toggleAttribute(isFavouriteAttributeName, !isFavourite);\n            }\n        } catch (exception) {\n            await Notification.exception(exception);\n        }\n    });\n}"],"names":["card","selected","packageSelected","document","querySelector","packageFile","changeButton","getElementsByClassName","addEventListener","e","preventDefault","value","removeAttribute","disabled","target","form","submit","packageHash","selectedHash","selectButton","packageId","button","async","isFavourite","hasAttribute","toggleAttribute","exception","Notification"],"mappings":"sRAgCiCA,KAAMC,gBAC7BC,gBAAkBC,SAASC,cAAc,sCACzCC,YAAcF,SAASC,cAAc,qCAEvCH,SAAU,OAEJK,aAAeN,KAAKO,uBAAuB,gCAAgC,GACjFD,aAAaE,iBAAiB,SAAUC,IACpCA,EAAEC,iBAEFR,gBAAgBS,OAAQ,EACxBT,gBAAgBU,gBAAgB,YAC5BP,cACAA,YAAYQ,UAAW,0CAIPP,cAEpBG,EAAEK,OAAOC,KAAKC,gBAEf,OACGC,YAAcd,SAASC,cAAc,kCACrCc,aAAelB,KAAKO,uBAAuB,yBAAyB,GACpEY,aAAenB,KAAKO,uBAAuB,gCAAgC,GAEjFY,aAAaX,iBAAiB,SAAUC,IACpCA,EAAEC,iBAEFR,gBAAgBS,OAAQ,EACxBT,gBAAgBU,gBAAgB,YAChCK,YAAYN,MAAQO,aAAaP,6CAGbQ,cAEpBV,EAAEK,OAAOC,KAAKC,oDA2BUhB,KAAMoB,iBAChCC,OAASrB,KAAKI,cAAc,qCAC7BiB,cAILA,OAAOb,iBAAiB,SAASc,oBAEnBC,YAAcF,OAAOG,aAHF,2BAIA,2BAAiBJ,WAAYG,cAElDF,OAAOI,gBANc,qBAM6BF,aAExD,MAAOG,iBACCC,sBAAaD,UAAUA,yDAhC/BrB,YAAcF,SAASC,cAAc,kCACrCF,gBAAkBC,SAASC,cAAc,sCAC/CC,YAAYG,iBAAiB,UAAWC,IACpCP,gBAAgBS,OAAQ,EACxBT,gBAAgBU,gBAAgB,mDAEZP,aACpBI,EAAEK,OAAOC,KAAKC"}