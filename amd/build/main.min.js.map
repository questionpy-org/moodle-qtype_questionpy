{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {get_strings as getStrings} from 'core/str';\n\n\n/**\n * Retrieves and returns QuestionPy packages from the application server.\n *\n * @returns {[{name: string, icon: string, description: string, id: string, version: string}]} List of packages\n */\nconst getPackages = () => {\n    // TODO:- retrieve packages from application server.\n    //      - Add optional search parameter(s).\n\n    // create fake data for now\n    let packages = [];\n    for (let i = 1; i <= 4; i++) {\n        packages.push(\n            {\n                'id': `${i}`,\n                'name': `ExampleType ${i}`,\n                'description': `This describes the package ExampleType ${i}. `.repeat(i),\n                'author': `Author ${i}`,\n                'license': `MIT`,\n                'icon': 'https://placeimg.com/480/480/tech/grayscale',\n                'version': `0.0.${i}`\n            },\n        );\n    }\n    return packages;\n};\n\n\n/**\n * Initializes the package selection modal.\n */\nexport const init = () => {\n    // Fetch initial packages\n    const initPackages = getPackages();\n\n    // Internationalisation\n    let strings = [\n        {\n            key: 'modal_title',\n            component: 'qtype_questionpy'\n        },\n        {\n            key: 'modal_load_package',\n            component: 'qtype_questionpy'\n        },\n    ];\n\n    getStrings(strings)\n        .then(([modalTitle, modalLoadPackage]) => {\n            const openQuestionTypeModalBtn = document.getElementById('open_question_type_modal');\n            openQuestionTypeModalBtn.onclick = () => {\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: modalTitle,\n                    body: Templates.render('qtype_questionpy/select_package_modal', {\n                        'questionpy_packages': initPackages,\n                    }),\n                }).done(modal => {\n                    modal.setSaveButtonText(modalLoadPackage);\n                    modal.getRoot().on(ModalEvents.save, () => {\n                        // TODO: check if a package was selected.\n                        // const package_id = modal.getRoot().find('form').serialize();\n                    });\n                    modal.show();\n                });\n            };\n            return;\n        })\n        .catch(/* TODO. */);\n};\n"],"names":["initPackages","packages","i","push","repeat","getPackages","key","component","then","_ref","modalTitle","modalLoadPackage","document","getElementById","onclick","create","type","ModalFactory","types","SAVE_CANCEL","title","body","Templates","render","done","modal","setSaveButtonText","getRoot","on","ModalEvents","save","show","catch"],"mappings":"sfAqCoB,WAEVA,aA5BU,UAKZC,SAAW,OACV,IAAIC,EAAI,EAAGA,GAAK,EAAGA,IACpBD,SAASE,KACL,cACaD,8BACcA,eACR,iDAA0CA,QAAME,OAAOF,2BAClDA,sBAEZ,oEACUA,YAIvBD,UAScI,wBAGP,CACV,CACIC,IAAK,cACLC,UAAW,oBAEf,CACID,IAAK,qBACLC,UAAW,sBAKdC,MAAKC,WAAEC,WAAYC,uBACiBC,SAASC,eAAe,4BAChCC,QAAU,4BAClBC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,MAAOV,WACPW,KAAMC,mBAAUC,OAAO,wCAAyC,qBACrCvB,iBAE5BwB,MAAKC,QACJA,MAAMC,kBAAkBf,kBACxBc,MAAME,UAAUC,GAAGC,sBAAYC,MAAM,SAIrCL,MAAMM,cAKjBC"}