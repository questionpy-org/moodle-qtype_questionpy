{"version":3,"file":"mutations.min.js","sources":["../../src/package_search/mutations.js"],"sourcesContent":["/*\n * This file is part of the QuestionPy Moodle plugin - https://questionpy.org\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @module qtype_questionpy/package_search/mutations\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport {favouritePackage} from 'qtype_questionpy/utils';\n\nexport default class {\n    /**\n     * @param {{contextid: number, limit: number}} options\n     */\n    constructor(options) {\n        this.options = options;\n    }\n\n    /**\n     * Search through given categories.\n     *\n     * If no page is provided the current page will be used.\n     *\n     * @param {any} state\n     * @param {number|null} page\n     * @param {string[]} categories\n     * @returns {any}\n     * @private\n     */\n    _getSearchPackagesInCategoriesPromise(state, page, categories) {\n        const methods = [];\n        for (const category of categories) {\n            const method = {\n                methodname: \"qtype_questionpy_search_packages\",\n                args: {\n                    query: state.general.query,\n                    tags: state.general.tags,\n                    category: category,\n                    sort: state.general.sorting.sort,\n                    order: state.general.sorting.order,\n                    limit: this.options.limit,\n                    page: (typeof page === \"number\") ? page : state[category].page,\n                    contextid: this.options.contextid,\n                },\n            };\n            methods.push(method);\n        }\n        return Ajax.call(methods);\n    }\n\n    /**\n     * Sets the `loading` property.\n     *\n     * It only communicates changes to the watchers if the `StateManager` is currently readonly.\n     *\n     * @param {StateManager} stateManager\n     * @param {boolean} loading\n     * @private\n     */\n    _setLoading(stateManager, loading) {\n        const state = stateManager.state;\n        if (state.loading === loading) {\n            return;\n        }\n        const isReadonly = stateManager.readonly;\n        if (isReadonly) {\n            stateManager.setReadOnly(false);\n        }\n        state.general.loading = loading;\n        if (isReadonly) {\n            stateManager.setReadOnly(true);\n        }\n    }\n\n    /**\n     * Used to search packages.\n     *\n     * Missing arguments are taken from the current state.\n     *\n     * @param {StateManager} stateManager\n     * @param {Object|null} args\n     * @param {string[]|null} categories\n     */\n    async searchPackages(stateManager, args = null, categories = null) {\n        const state = stateManager.state;\n\n        // Missing arguments are taken from the current state.\n        args = args || {};\n\n        // Search through every category if no categories are provided.\n        categories = categories || [\"all\", \"recentlyused\", \"favourites\", \"custom\"];\n\n        // Update general data.\n        stateManager.setReadOnly(false);\n        this._setLoading(stateManager, true);\n        state.general.query = (typeof args.query === \"string\") ? args.query : state.general.query;\n        state.general.tags = [];\n        state.general.sorting = {\n            sort: args.sort || state.general.sorting.sort,\n            order: args.order || state.general.sorting.order,\n        };\n        stateManager.setReadOnly(true);\n\n        try {\n            // Get search results for each category.\n            let results = await this._getSearchPackagesInCategoriesPromise(state, args.page, categories);\n\n            stateManager.setReadOnly(false);\n            // Update category specific data.\n            for (const [index, category] of categories.entries()) {\n                const result = await results[index];\n                state[`${category}Packages`] = result.packages;\n                state[category].count = result.count;\n                state[category].total = result.total;\n                if (typeof args.page === \"number\") {\n                    state[category].page = args.page;\n                }\n            }\n            stateManager.setReadOnly(true);\n        } catch (exception) {\n            await Notification.exception(exception);\n        } finally {\n            this._setLoading(stateManager, false);\n        }\n    }\n\n    /**\n     * Used to search for packages only by providing a query.\n     *\n     * @param {StateManager} stateManager\n     * @param {string} query\n     */\n    async searchPackagesByQuery(stateManager, query) {\n        await this.searchPackages(stateManager, {page: 0, query: query});\n    }\n\n    /**\n     * Used to change the current page of a tab.\n     *\n     * @param {StateManager} stateManager\n     * @param {string} category\n     * @param {number} page\n     */\n    async changePage(stateManager, category, page) {\n        await this.searchPackages(stateManager, {page: page}, [category]);\n    }\n\n    /**\n     * Used to change the current sorting.\n     *\n     * @param {StateManager} stateManager\n     * @param {string} sort\n     * @param {string} order\n     */\n    async changeSort(stateManager, sort, order) {\n        await this.searchPackages(stateManager, {sort: sort, order: order}, [\"all\", \"favourites\", \"custom\"]);\n    }\n\n    /**\n     * Used to re-/load data of given categories.\n     *\n     * @param {StateManager} stateManager\n     * @param {string[]} categories\n     */\n    async load(stateManager, categories) {\n        await this.searchPackages(stateManager, {}, categories);\n    }\n\n    /**\n     * Used to un-/favourite a package.\n     *\n     * @param {StateManager} stateManager\n     * @param {int} packageid\n     * @param {boolean} favourite\n     */\n    async favourite(stateManager, packageid, favourite) {\n        const state = stateManager.state;\n        try {\n            this._setLoading(stateManager, true);\n            const successful = await favouritePackage(packageid, favourite);\n            if (!successful) {\n                return;\n            }\n            stateManager.setReadOnly(false);\n            for (const category of [\"all\", \"custom\", \"recentlyused\"]) {\n                const pkg = state[`${category}Packages`].get(packageid);\n                if (pkg) {\n                    pkg.isfavourite = favourite;\n                }\n            }\n            stateManager.setReadOnly(true);\n            let page = state.favourites.page;\n            if (!favourite) {\n                // Turn back a page in 'favourites' if the unmarked package was the last one on the page.\n                const isFirstPage = page === 0;\n                const isLastPage = page === Math.floor((state.favourites.total - 1) / this.options.limit);\n                const existsOnePackage = state.favourites.count === 1;\n                if (!isFirstPage && isLastPage && existsOnePackage) {\n                    page -= 1;\n                }\n            }\n            await this.changePage(stateManager, 'favourites', page);\n        } catch (exception) {\n            await Notification.exception(exception);\n        } finally {\n            this._setLoading(stateManager, false);\n        }\n    }\n}\n"],"names":["constructor","options","_getSearchPackagesInCategoriesPromise","state","page","categories","methods","category","method","methodname","args","query","general","tags","sort","sorting","order","limit","this","contextid","push","Ajax","call","_setLoading","stateManager","loading","isReadonly","readonly","setReadOnly","results","index","entries","result","packages","count","total","exception","Notification","searchPackages","packageid","favourite","pkg","get","isfavourite","favourites","isFirstPage","isLastPage","Math","floor","existsOnePackage","changePage"],"mappings":"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"}