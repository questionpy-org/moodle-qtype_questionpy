{"version":3,"file":"tag_bar.min.js","sources":["../../../src/package_search/components/tag_bar.js"],"sourcesContent":["/*\n * This file is part of the QuestionPy Moodle plugin - https://questionpy.org\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @module qtype_questionpy/package_search/components/tag_bar\n */\n\nimport Component from 'qtype_questionpy/package_search/component';\nimport Autocomplete from 'core/form-autocomplete';\nimport {debounce} from 'core/utils';\nimport {getString} from 'core/str';\n\nexport default class extends Component {\n    create() {\n        this.selectors = {\n            TAG_BAR: '[data-for=\"tag-bar\"] > select',\n        };\n    }\n\n    async stateReady() {\n        this.addEventListener(\n            this.getElement(this.selectors.TAG_BAR),\n            'change',\n            debounce((event) => this.filterPackages(event.target.selectedOptions), 300)\n        );\n\n        Autocomplete.enhance(\n            // The selector to the select element.\n            this.selectors.TAG_BAR,\n            // No custom words allowed.\n            false,\n            // We want to use ajax.\n            'qtype_questionpy/package_search/components/_tag_bar_async',\n            // The placeholder.\n            await getString('tag_bar', 'qtype_questionpy'),\n            // We do not want to be case-sensitive.\n            false,\n            // We want to show suggestions.\n            true,\n            // If no selection is made, show this string.\n            await getString('tag_bar_no_selection', 'qtype_questionpy'),\n            // Close suggestion.\n            true,\n            // We want to overwrite the layout.\n            {\n                layout: 'qtype_questionpy/package_search/tag_bar/layout',\n                selection: 'qtype_questionpy/package_search/tag_bar/selection',\n            },\n        );\n    }\n\n  /**\n   * Dispatches package filter by tag mutation.\n   *\n   * @param {HTMLCollectionOf<HTMLOptionElement>} selectedOptions\n   */\n    filterPackages(selectedOptions) {\n        const tags = [];\n        for (let i = 0; i < selectedOptions.length; i++) {\n            tags.push(selectedOptions[i].value);\n        }\n        this.reactive.dispatch('filterPackagesByTags', tags);\n    }\n}\n"],"names":["Component","create","selectors","TAG_BAR","addEventListener","this","getElement","event","filterPackages","target","selectedOptions","enhance","layout","selection","tags","i","length","push","value","reactive","dispatch"],"mappings":"qgBA0B6BA,mBACzBC,cACSC,UAAY,CACbC,QAAS,yDAKRC,iBACDC,KAAKC,WAAWD,KAAKH,UAAUC,SAC/B,UACA,oBAAUI,OAAUF,KAAKG,eAAeD,MAAME,OAAOC,kBAAkB,gCAG9DC,QAETN,KAAKH,UAAUC,SAEf,EAEA,kEAEM,kBAAU,UAAW,qBAE3B,GAEA,QAEM,kBAAU,uBAAwB,qBAExC,EAEA,CACIS,OAAQ,iDACRC,UAAW,sDAUvBL,eAAeE,uBACLI,KAAO,OACR,IAAIC,EAAI,EAAGA,EAAIL,gBAAgBM,OAAQD,IACxCD,KAAKG,KAAKP,gBAAgBK,GAAGG,YAE5BC,SAASC,SAAS,uBAAwBN"}