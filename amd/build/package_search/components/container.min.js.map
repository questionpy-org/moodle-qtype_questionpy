{"version":3,"file":"container.min.js","sources":["../../../src/package_search/components/container.js"],"sourcesContent":["/*\n * This file is part of the QuestionPy Moodle plugin - https://questionpy.org\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @module qtype_questionpy/package_search/components/container\n */\n\nimport * as templates from 'core/templates';\nimport * as strings from 'core/str';\nimport Notification from 'core/notification';\nimport {BaseComponent} from 'core/reactive';\n\nexport default class extends BaseComponent {\n    constructor(description) {\n        super(description);\n    }\n\n    getWatchers() {\n        return [\n            {watch: `general.loading:updated`, handler: this.updateStatus},\n            {watch: `all:updated`, handler: this.render},\n        ];\n    }\n\n    async create() {\n        this.selectors = {\n            LOADING_INDICATOR: `[data-for=\"loading-indicator\"]`,\n            ALL_HEADER: `[data-for=\"all-header\"]`,\n            ALL_CONTENT: `[data-for=\"all-content\"]`,\n        };\n\n        // Prefetch the package template for faster rendering.\n        this.packageTemplate = \"qtype_questionpy/package/package_selection\";\n        await templates.prefetchTemplates([this.packageTemplate]);\n    }\n\n    async stateReady() {\n        // Initial loading of the packages.\n        this.reactive.dispatch('searchPackages');\n    }\n\n    /**\n     * Returns the current state.\n     *\n     * @returns {any}\n     */\n    getState() {\n        return this.reactive.stateManager.state;\n    }\n\n    /**\n     * Hides or shows the loading indicator.\n     */\n    updateStatus() {\n        const loading = this.getState().general.loading;\n        this.getElement(this.selectors.LOADING_INDICATOR).style.visibility = loading ? \"visible\" : \"hidden\";\n    }\n\n    /**\n     * Groups render promises for package templates.\n     *\n     * @param {Object[]} contexts\n     * @returns {Promise}\n     * @private\n     */\n    _getRenderPromise(contexts) {\n        let promises = [];\n        for (const context of contexts) {\n            const promise = templates.renderForPromise(this.packageTemplate, context);\n            promises.push(promise);\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Renders every package inside the current state.\n     *\n     * @returns {Promise<void>}\n     */\n    async render() {\n        try {\n            // Get string and render templates.\n            const getStringAll = strings.get_string(\"all_packages\", \"qtype_questionpy\", this.getState().all.data.total);\n            const renderTemplatesAll = this._getRenderPromise(this.getState().all.data.packages);\n            const [stringAll, templatesAll] = await Promise.all([getStringAll, renderTemplatesAll]);\n\n            // Update DOM.\n            this.getElement(this.selectors.ALL_CONTENT).innerHTML = \"\";\n            for (const {html, js} of templatesAll) {\n                templates.appendNodeContents(this.getElement(this.selectors.ALL_CONTENT), html, js);\n            }\n            this.getElement(this.selectors.ALL_HEADER).innerHTML = stringAll;\n        } catch (exception) {\n            await Notification.exception(exception);\n        }\n    }\n}\n"],"names":["BaseComponent","constructor","description","getWatchers","watch","handler","this","updateStatus","render","selectors","LOADING_INDICATOR","ALL_HEADER","ALL_CONTENT","packageTemplate","templates","prefetchTemplates","reactive","dispatch","getState","stateManager","state","loading","general","getElement","style","visibility","_getRenderPromise","contexts","promises","context","promise","renderForPromise","push","Promise","all","getStringAll","strings","get_string","data","total","renderTemplatesAll","packages","stringAll","templatesAll","innerHTML","html","js","appendNodeContents","exception","Notification"],"mappings":"w4CA0B6BA,wBACzBC,YAAYC,mBACFA,aAGVC,oBACW,CACH,CAACC,gCAAkCC,QAASC,KAAKC,cACjD,CAACH,oBAAsBC,QAASC,KAAKE,6BAKpCC,UAAY,CACbC,mDACAC,qCACAC,6CAICC,gBAAkB,mDACjBC,UAAUC,kBAAkB,CAACT,KAAKO,0CAKnCG,SAASC,SAAS,kBAQ3BC,kBACWZ,KAAKU,SAASG,aAAaC,MAMtCb,qBACUc,QAAUf,KAAKY,WAAWI,QAAQD,aACnCE,WAAWjB,KAAKG,UAAUC,mBAAmBc,MAAMC,WAAaJ,QAAU,UAAY,SAU/FK,kBAAkBC,cACVC,SAAW,OACV,MAAMC,WAAWF,SAAU,OACtBG,QAAUhB,UAAUiB,iBAAiBzB,KAAKO,gBAAiBgB,SACjED,SAASI,KAAKF,gBAEXG,QAAQC,IAAIN,mCAWTO,aAAeC,QAAQC,WAAW,eAAgB,mBAAoB/B,KAAKY,WAAWgB,IAAII,KAAKC,OAC/FC,mBAAqBlC,KAAKoB,kBAAkBpB,KAAKY,WAAWgB,IAAII,KAAKG,WACpEC,UAAWC,oBAAsBV,QAAQC,IAAI,CAACC,aAAcK,0BAG9DjB,WAAWjB,KAAKG,UAAUG,aAAagC,UAAY,OACnD,MAAMC,KAACA,KAADC,GAAOA,MAAOH,aACrB7B,UAAUiC,mBAAmBzC,KAAKiB,WAAWjB,KAAKG,UAAUG,aAAciC,KAAMC,SAE/EvB,WAAWjB,KAAKG,UAAUE,YAAYiC,UAAYF,UACzD,MAAOM,iBACCC,sBAAaD,UAAUA"}