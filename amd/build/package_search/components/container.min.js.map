{"version":3,"file":"container.min.js","sources":["../../../src/package_search/components/container.js"],"sourcesContent":["/*\n * This file is part of the QuestionPy Moodle plugin - https://questionpy.org\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @module qtype_questionpy/package_search/components/container\n */\n\nimport * as templates from 'core/templates';\nimport * as strings from 'core/str';\nimport Notification from 'core/notification';\nimport {BaseComponent} from 'core/reactive';\n\nexport default class extends BaseComponent {\n    constructor(description) {\n        super(description);\n    }\n\n    getWatchers() {\n        return [\n            {watch: \"general.loading:updated\", handler: this.updateStatus},\n            {watch: \"all:updated\", handler: this.renderAll},\n            {watch: \"recentlyused:updated\", handler: this.renderRecentlyUsed},\n            {watch: \"favourites:updated\", handler: this.renderFavourites},\n            {watch: \"mine:updated\", handler: this.renderMine},\n        ];\n    }\n\n    async create() {\n        this.selectors = {\n            LOADING_INDICATOR: `[data-for=\"loading-indicator\"]`,\n            ALL_HEADER: `[data-for=\"all-header\"]`,\n            ALL_CONTENT: `[data-for=\"all-content\"]`,\n            RECENTLY_USED_HEADER: `[data-for=\"recently-used-header\"]`,\n            RECENTLY_USED_CONTENT: `[data-for=\"recently-used-content\"]`,\n            FAVOURITES_HEADER: `[data-for=\"favourites-header\"]`,\n            FAVOURITES_CONTENT: `[data-for=\"favourites-content\"]`,\n            MINE_HEADER: `[data-for=\"mine-header\"]`,\n            MINE_CONTENT: `[data-for=\"mine-content\"]`,\n        };\n\n        // Prefetch the package template for faster rendering.\n        this.packageTemplate = \"qtype_questionpy/package/package_selection\";\n        await templates.prefetchTemplates([this.packageTemplate]);\n    }\n\n    async stateReady() {\n        // Initial loading of the packages.\n        this.reactive.dispatch(\"searchPackages\");\n    }\n\n    /**\n     * Returns the current state.\n     *\n     * @returns {any}\n     */\n    getState() {\n        return this.reactive.stateManager.state;\n    }\n\n    /**\n     * Hides or shows the loading indicator.\n     */\n    updateStatus() {\n        const loading = this.getState().general.loading;\n        this.getElement(this.selectors.LOADING_INDICATOR).style.visibility = loading ? \"visible\" : \"hidden\";\n    }\n\n    /**\n     * Groups render promises for package templates.\n     *\n     * @param {Object[]} contexts\n     * @returns {Promise}\n     * @private\n     */\n    _getPackageTemplatesPromise(contexts) {\n        let promises = [];\n        for (const context of contexts) {\n            const promise = templates.renderForPromise(this.packageTemplate, context);\n            promises.push(promise);\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Groups header and templates promises.\n     *\n     * @param {string} headerStringKey\n     * @param {Object} packageData\n     * @returns {Promise<[string, Object]>}\n     * @private\n     */\n    async _renderPromise(headerStringKey, packageData) {\n        // Get string and render templates.\n        const getString = strings.get_string(headerStringKey, \"qtype_questionpy\", packageData.total);\n        const renderTemplates = this._getPackageTemplatesPromise(packageData.packages);\n        return Promise.all([getString, renderTemplates]);\n    }\n\n    /**\n     * Renders every package inside a specific tab.\n     *\n     * @param {string} headerSelector\n     * @param {string} contentSelector\n     * @param {string} header\n     * @param {Object} content\n     * @private\n     */\n    _render(headerSelector, contentSelector, header, content) {\n        const contentElement = this.getElement(contentSelector);\n        contentElement.innerHTML = \"\";\n        for (const {html, js} of content) {\n            templates.appendNodeContents(contentElement, html, js);\n        }\n        this.getElement(headerSelector).innerHTML = header;\n    }\n\n\n    /**\n     * Renders every package inside the current state for the `all`-category.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderAll() {\n        try {\n            const state = this.getState();\n            // Get string and package templates.\n            const [string, packageTemplates] = await this._renderPromise(\"search_all_header\", state.all.data);\n            // Update DOM.\n            this._render(this.selectors.ALL_HEADER, this.selectors.ALL_CONTENT, string, packageTemplates);\n        } catch (exception) {\n            await Notification.exception(exception);\n        }\n    }\n\n    /**\n     * Renders every package inside the current state for the `recentlyused`-category.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderRecentlyUsed() {\n        try {\n            const state = this.getState();\n            // Get string and package templates.\n            const [string, packageTemplates] = await this._renderPromise(\"search_recently_used_header\", state.recentlyused.data);\n            // Update DOM.\n            this._render(this.selectors.RECENTLY_USED_HEADER, this.selectors.RECENTLY_USED_CONTENT, string, packageTemplates);\n        } catch (exception) {\n            await Notification.exception(exception);\n        }\n    }\n\n    /**\n     * Renders every package inside the current state for the `favourites`-category.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderFavourites() {\n        try {\n            const state = this.getState();\n            // Get string and package templates.\n            const [string, packageTemplates] = await this._renderPromise(\"search_favourites_header\", state.favourites.data);\n            // Update DOM.\n            this._render(this.selectors.FAVOURITES_HEADER, this.selectors.FAVOURITES_CONTENT, string, packageTemplates);\n        } catch (exception) {\n            await Notification.exception(exception);\n        }\n    }\n\n    /**\n     * Renders every package inside the current state for the `mine`-category.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderMine() {\n        try {\n            const state = this.getState();\n            // Get string and package templates.\n            const [string, packageTemplates] = await this._renderPromise(\"search_mine_header\", state.mine.data);\n            // Update DOM.\n            this._render(this.selectors.MINE_HEADER, this.selectors.MINE_CONTENT, string, packageTemplates);\n        } catch (exception) {\n            await Notification.exception(exception);\n        }\n    }\n}\n"],"names":["BaseComponent","constructor","description","getWatchers","watch","handler","this","updateStatus","renderAll","renderRecentlyUsed","renderFavourites","renderMine","selectors","LOADING_INDICATOR","ALL_HEADER","ALL_CONTENT","RECENTLY_USED_HEADER","RECENTLY_USED_CONTENT","FAVOURITES_HEADER","FAVOURITES_CONTENT","MINE_HEADER","MINE_CONTENT","packageTemplate","templates","prefetchTemplates","reactive","dispatch","getState","stateManager","state","loading","general","getElement","style","visibility","_getPackageTemplatesPromise","contexts","promises","context","promise","renderForPromise","push","Promise","all","headerStringKey","packageData","getString","strings","get_string","total","renderTemplates","packages","_render","headerSelector","contentSelector","header","content","contentElement","innerHTML","html","js","appendNodeContents","string","packageTemplates","_renderPromise","data","exception","Notification","recentlyused","favourites","mine"],"mappings":"w4CA0B6BA,wBACzBC,YAAYC,mBACFA,aAGVC,oBACW,CACH,CAACC,MAAO,0BAA2BC,QAASC,KAAKC,cACjD,CAACH,MAAO,cAAeC,QAASC,KAAKE,WACrC,CAACJ,MAAO,uBAAwBC,QAASC,KAAKG,oBAC9C,CAACL,MAAO,qBAAsBC,QAASC,KAAKI,kBAC5C,CAACN,MAAO,eAAgBC,QAASC,KAAKK,iCAKrCC,UAAY,CACbC,mDACAC,qCACAC,uCACAC,yDACAC,2DACAC,mDACAC,qDACAC,uCACAC,+CAICC,gBAAkB,mDACjBC,UAAUC,kBAAkB,CAAClB,KAAKgB,0CAKnCG,SAASC,SAAS,kBAQ3BC,kBACWrB,KAAKmB,SAASG,aAAaC,MAMtCtB,qBACUuB,QAAUxB,KAAKqB,WAAWI,QAAQD,aACnCE,WAAW1B,KAAKM,UAAUC,mBAAmBoB,MAAMC,WAAaJ,QAAU,UAAY,SAU/FK,4BAA4BC,cACpBC,SAAW,OACV,MAAMC,WAAWF,SAAU,OACtBG,QAAUhB,UAAUiB,iBAAiBlC,KAAKgB,gBAAiBgB,SACjED,SAASI,KAAKF,gBAEXG,QAAQC,IAAIN,+BAWFO,gBAAiBC,mBAE5BC,UAAYC,QAAQC,WAAWJ,gBAAiB,mBAAoBC,YAAYI,OAChFC,gBAAkB5C,KAAK6B,4BAA4BU,YAAYM,iBAC9DT,QAAQC,IAAI,CAACG,UAAWI,kBAYnCE,QAAQC,eAAgBC,gBAAiBC,OAAQC,eACvCC,eAAiBnD,KAAK0B,WAAWsB,iBACvCG,eAAeC,UAAY,OACtB,MAAMC,KAACA,KAADC,GAAOA,MAAOJ,QACrBjC,UAAUsC,mBAAmBJ,eAAgBE,KAAMC,SAElD5B,WAAWqB,gBAAgBK,UAAYH,mCAWlC1B,MAAQvB,KAAKqB,YAEZmC,OAAQC,wBAA0BzD,KAAK0D,eAAe,oBAAqBnC,MAAMc,IAAIsB,WAEvFb,QAAQ9C,KAAKM,UAAUE,WAAYR,KAAKM,UAAUG,YAAa+C,OAAQC,kBAC9E,MAAOG,iBACCC,sBAAaD,UAAUA,iDAWvBrC,MAAQvB,KAAKqB,YAEZmC,OAAQC,wBAA0BzD,KAAK0D,eAAe,8BAA+BnC,MAAMuC,aAAaH,WAE1Gb,QAAQ9C,KAAKM,UAAUI,qBAAsBV,KAAKM,UAAUK,sBAAuB6C,OAAQC,kBAClG,MAAOG,iBACCC,sBAAaD,UAAUA,+CAWvBrC,MAAQvB,KAAKqB,YAEZmC,OAAQC,wBAA0BzD,KAAK0D,eAAe,2BAA4BnC,MAAMwC,WAAWJ,WAErGb,QAAQ9C,KAAKM,UAAUM,kBAAmBZ,KAAKM,UAAUO,mBAAoB2C,OAAQC,kBAC5F,MAAOG,iBACCC,sBAAaD,UAAUA,yCAWvBrC,MAAQvB,KAAKqB,YAEZmC,OAAQC,wBAA0BzD,KAAK0D,eAAe,qBAAsBnC,MAAMyC,KAAKL,WAEzFb,QAAQ9C,KAAKM,UAAUQ,YAAad,KAAKM,UAAUS,aAAcyC,OAAQC,kBAChF,MAAOG,iBACCC,sBAAaD,UAAUA"}